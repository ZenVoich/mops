type Version = text;
type Ver = text;
type Time = int;
type Text = text;
type StorageStats = 
 record {
   cyclesBalance: nat;
   fileCount: nat;
   memorySize: nat;
 };
type StorageId = principal;
type Script = 
 record {
   name: text;
   value: text;
 };
type Result_5 = 
 variant {
   err: Err;
   ok: vec FileId;
 };
type Result_4 = 
 variant {
   err: Err;
   ok: Ver;
 };
type Result_3 = 
 variant {
   err: Err;
   ok: PackageDetails;
 };
type Result_2 = 
 variant {
   err: Err;
   ok: FileId;
 };
type Result_1 = 
 variant {
   err: PublishingErr;
   ok: PublishingId;
 };
type Result = 
 variant {
   err: Err;
   ok;
 };
type PublishingId = text;
type PublishingErr = text;
type PackageSummary__1 = 
 record {
   config: PackageConfigV2__1;
   downloadsInLast30Days: nat;
   downloadsInLast7Days: nat;
   downloadsTotal: nat;
   owner: principal;
   publication: PackagePublication;
 };
type PackageSummary = 
 record {
   config: PackageConfigV2__1;
   downloadsInLast30Days: nat;
   downloadsInLast7Days: nat;
   downloadsTotal: nat;
   owner: principal;
   publication: PackagePublication;
 };
type PackagePublication = 
 record {
   storage: principal;
   time: Time;
   user: principal;
 };
type PackageName__1 = text;
type PackageName = text;
type PackageId = text;
type PackageDetails = 
 record {
   config: PackageConfigV2__1;
   dependents: vec PackageSummary__1;
   deps: vec PackageSummary__1;
   devDeps: vec PackageSummary__1;
   downloadTrend: vec DownloadsSnapshot;
   downloadsInLast30Days: nat;
   downloadsInLast7Days: nat;
   downloadsTotal: nat;
   owner: principal;
   publication: PackagePublication;
   versionHistory: vec PackageSummary__1;
 };
type PackageConfigV2__1 = 
 record {
   baseDir: text;
   dependencies: vec DependencyV2;
   description: text;
   devDependencies: vec DependencyV2;
   dfx: text;
   documentation: text;
   donation: text;
   homepage: text;
   keywords: vec text;
   license: text;
   moc: text;
   name: PackageName;
   readme: text;
   repository: text;
   scripts: vec Script;
   version: text;
 };
type PackageConfigV2 = 
 record {
   baseDir: text;
   dependencies: vec DependencyV2;
   description: text;
   devDependencies: vec DependencyV2;
   dfx: text;
   documentation: text;
   donation: text;
   homepage: text;
   keywords: vec text;
   license: text;
   moc: text;
   name: PackageName;
   readme: text;
   repository: text;
   scripts: vec Script;
   version: text;
 };
type FileId = text;
type Err = text;
type DownloadsSnapshot__1 = 
 record {
   downloads: nat;
   endTime: Time;
   startTime: Time;
 };
type DownloadsSnapshot = 
 record {
   downloads: nat;
   endTime: Time;
   startTime: Time;
 };
type DependencyV2 = 
 record {
   name: PackageName;
   repo: text;
   version: text;
 };
service : {
  finishPublish: (PublishingId) -> (Result);
  getApiVersion: () -> (Text) query;
  getDefaultPackages: (text) -> (vec record {
                                       PackageName__1;
                                       Version;
                                     }) query;
  getDownloadTrendByPackageId: (PackageId) ->
   (vec DownloadsSnapshot__1) query;
  getDownloadTrendByPackageName: (PackageName__1) ->
   (vec DownloadsSnapshot__1) query;
  getFileIds: (PackageName__1, Ver) -> (Result_5) query;
  getHighestVersion: (PackageName__1) -> (Result_4) query;
  getMostDownloadedPackages: () -> (vec PackageSummary) query;
  getMostDownloadedPackagesIn7Days: () -> (vec PackageSummary) query;
  getPackageDetails: (PackageName__1, Ver) -> (Result_3) query;
  getRecentlyUpdatedPackages: () -> (vec PackageSummary) query;
  getStoragesStats: () -> (vec record {
                                 StorageId;
                                 StorageStats;
                               }) query;
  getTotalDownloads: () -> (nat) query;
  getTotalPackages: () -> (nat) query;
  notifyInstall: (PackageName__1, Ver) -> () oneway;
  search: (Text) -> (vec PackageSummary) query;
  startFileUpload: (PublishingId, Text, nat, blob) -> (Result_2);
  startPublish: (PackageConfigV2) -> (Result_1);
  uploadFileChunk: (PublishingId, FileId, nat, blob) -> (Result);
}
