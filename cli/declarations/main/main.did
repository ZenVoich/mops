type User__1 = 
 record {
   displayName: text;
   email: text;
   emailVerified: bool;
   github: text;
   githubVerified: bool;
   id: principal;
   name: text;
   site: text;
   twitter: text;
   twitterVerified: bool;
 };
type User = 
 record {
   displayName: text;
   email: text;
   emailVerified: bool;
   github: text;
   githubVerified: bool;
   id: principal;
   name: text;
   site: text;
   twitter: text;
   twitterVerified: bool;
 };
type Time = int;
type Text = text;
type TestsChanges = 
 record {
   addedNames: vec text;
   removedNames: vec text;
 };
type TestStats__1 = 
 record {
   passed: nat;
   passedNames: vec text;
 };
type TestStats = 
 record {
   passed: nat;
   passedNames: vec text;
 };
type StreamingToken = blob;
type StreamingStrategy = variant {
                           Callback:
                            record {
                              callback: StreamingCallback;
                              token: StreamingToken;
                            };};
type StreamingCallbackResponse = 
 record {
   body: blob;
   token: opt StreamingToken;
 };
type StreamingCallback = func (StreamingToken) ->
                          (opt StreamingCallbackResponse) query;
type StorageStats = 
 record {
   cyclesBalance: nat;
   fileCount: nat;
   memorySize: nat;
 };
type StorageId = principal;
type SemverPart = 
 variant {
   major;
   minor;
   patch;
 };
type Script = 
 record {
   name: text;
   value: text;
 };
type Result_8 = 
 variant {
   err: Err;
   ok: vec record {
             FileId;
             blob;
           };
 };
type Result_7 = 
 variant {
   err: Err;
   ok: vec FileId;
 };
type Result_6 = 
 variant {
   err: Err;
   ok: vec record {
             PackageName__1;
             PackageVersion__1;
           };
 };
type Result_5 = 
 variant {
   err: Err;
   ok: PackageVersion__1;
 };
type Result_4 = 
 variant {
   err: Err;
   ok: PackageDetails;
 };
type Result_3 = 
 variant {
   err: text;
   ok;
 };
type Result_2 = 
 variant {
   err: Err;
   ok: FileId;
 };
type Result_1 = 
 variant {
   err: Err;
   ok: PublishingId;
 };
type Result = 
 variant {
   err: Err;
   ok;
 };
type Response = 
 record {
   body: blob;
   headers: vec Header;
   status_code: nat16;
   streaming_strategy: opt StreamingStrategy;
   upgrade: opt bool;
 };
type Requirement = 
 record {
   name: text;
   value: text;
 };
type Request = 
 record {
   body: blob;
   certificate_version: opt nat16;
   headers: vec Header;
   method: text;
   url: text;
 };
type PublishingId = text;
type PageCount = nat;
type PackageVersion__1 = text;
type PackageVersion = text;
type PackageSummary__1 = 
 record {
   config: PackageConfigV3;
   depAlias: text;
   downloadsInLast30Days: nat;
   downloadsInLast7Days: nat;
   downloadsTotal: nat;
   highestVersion: PackageVersion;
   maintainers: vec User;
   owner: principal;
   ownerInfo: User;
   owners: vec User;
   publication: PackagePublication;
   publisher: User;
   quality: PackageQuality;
 };
type PackageSummaryWithChanges__1 = 
 record {
   changes: PackageChanges;
   config: PackageConfigV3;
   depAlias: text;
   downloadsInLast30Days: nat;
   downloadsInLast7Days: nat;
   downloadsTotal: nat;
   highestVersion: PackageVersion;
   maintainers: vec User;
   owner: principal;
   ownerInfo: User;
   owners: vec User;
   publication: PackagePublication;
   publisher: User;
   quality: PackageQuality;
 };
type PackageSummaryWithChanges = 
 record {
   changes: PackageChanges;
   config: PackageConfigV3;
   depAlias: text;
   downloadsInLast30Days: nat;
   downloadsInLast7Days: nat;
   downloadsTotal: nat;
   highestVersion: PackageVersion;
   maintainers: vec User;
   owner: principal;
   ownerInfo: User;
   owners: vec User;
   publication: PackagePublication;
   publisher: User;
   quality: PackageQuality;
 };
type PackageSummary = 
 record {
   config: PackageConfigV3;
   depAlias: text;
   downloadsInLast30Days: nat;
   downloadsInLast7Days: nat;
   downloadsTotal: nat;
   highestVersion: PackageVersion;
   maintainers: vec User;
   owner: principal;
   ownerInfo: User;
   owners: vec User;
   publication: PackagePublication;
   publisher: User;
   quality: PackageQuality;
 };
type PackageQuality = 
 record {
   depsStatus: DepsStatus;
   docsCoverage: float64;
   hasDescription: bool;
   hasDocumentation: bool;
   hasKeywords: bool;
   hasLicense: bool;
   hasReleaseNotes: bool;
   hasRepository: bool;
   hasTests: bool;
 };
type PackagePublication = 
 record {
   storage: principal;
   time: Time;
   user: principal;
 };
type PackageName__1 = text;
type PackageName = text;
type PackageId = text;
type PackageFileStatsPublic = 
 record {
   sourceFiles: nat;
   sourceSize: nat;
 };
type PackageDetails = 
 record {
   benchmarks: Benchmarks__1;
   changes: PackageChanges;
   config: PackageConfigV3;
   depAlias: text;
   dependents: vec PackageSummary__1;
   deps: vec PackageSummary__1;
   devDeps: vec PackageSummary__1;
   docsCoverage: float64;
   downloadTrend: vec DownloadsSnapshot;
   downloadsInLast30Days: nat;
   downloadsInLast7Days: nat;
   downloadsTotal: nat;
   fileStats: PackageFileStatsPublic;
   highestVersion: PackageVersion;
   maintainers: vec User;
   owner: principal;
   ownerInfo: User;
   owners: vec User;
   publication: PackagePublication;
   publisher: User;
   quality: PackageQuality;
   testStats: TestStats__1;
   versionHistory: vec PackageSummaryWithChanges__1;
 };
type PackageConfigV3_Publishing = 
 record {
   baseDir: text;
   dependencies: vec DependencyV2;
   description: text;
   devDependencies: vec DependencyV2;
   dfx: text;
   documentation: text;
   donation: text;
   homepage: text;
   keywords: vec text;
   license: text;
   moc: text;
   name: PackageName;
   readme: text;
   repository: text;
   requirements: opt vec Requirement;
   scripts: vec Script;
   version: text;
 };
type PackageConfigV3 = 
 record {
   baseDir: text;
   dependencies: vec DependencyV2;
   description: text;
   devDependencies: vec DependencyV2;
   dfx: text;
   documentation: text;
   donation: text;
   homepage: text;
   keywords: vec text;
   license: text;
   moc: text;
   name: PackageName;
   readme: text;
   repository: text;
   requirements: vec Requirement;
   scripts: vec Script;
   version: text;
 };
type PackageChanges = 
 record {
   curBenchmarks: Benchmarks__1;
   curDocsCoverage: float64;
   deps: vec DepChange;
   devDeps: vec DepChange;
   notes: text;
   prevBenchmarks: Benchmarks__1;
   prevDocsCoverage: float64;
   tests: TestsChanges;
 };
type Main = 
 service {
   addMaintainer: (PackageName__1, principal) -> (Result_3);
   addOwner: (PackageName__1, principal) -> (Result_3);
   backup: () -> ();
   computeHashesForExistingFiles: () -> ();
   finishPublish: (PublishingId) -> (Result);
   getApiVersion: () -> (Text) query;
   getBackupCanisterId: () -> (principal) query;
   getDefaultPackages: (text) ->
    (vec record {
           PackageName__1;
           PackageVersion__1;
         }) query;
   getDownloadTrendByPackageId: (PackageId) ->
    (vec DownloadsSnapshot__1) query;
   getDownloadTrendByPackageName: (PackageName__1) ->
    (vec DownloadsSnapshot__1) query;
   getFileHashes: (PackageName__1, PackageVersion__1) -> (Result_8);
   getFileHashesByPackageIds: (vec PackageId) ->
    (vec record {
           PackageId;
           vec record {
                 FileId;
                 blob;
               };
         });
   getFileHashesQuery: (PackageName__1, PackageVersion__1) ->
    (Result_8) query;
   getFileIds: (PackageName__1, PackageVersion__1) -> (Result_7) query;
   getHighestSemverBatch:
    (vec record {
           PackageName__1;
           PackageVersion__1;
           SemverPart;
         }) -> (Result_6) query;
   getHighestVersion: (PackageName__1) -> (Result_5) query;
   getMostDownloadedPackages: () -> (vec PackageSummary) query;
   getMostDownloadedPackagesIn7Days: () -> (vec PackageSummary) query;
   getNewPackages: () -> (vec PackageSummary) query;
   getPackageDetails: (PackageName__1, PackageVersion__1) -> (Result_4) query;
   getPackageMaintainers: (PackageName__1) -> (vec principal) query;
   getPackageOwners: (PackageName__1) -> (vec principal) query;
   getPackagesByCategory: () -> (vec record {
                                       text;
                                       vec PackageSummary;
                                     }) query;
   getRecentlyUpdatedPackages: () -> (vec PackageSummaryWithChanges) query;
   getStoragesStats: () -> (vec record {
                                  StorageId;
                                  StorageStats;
                                }) query;
   getTotalDownloads: () -> (nat) query;
   getTotalPackages: () -> (nat) query;
   getUser: (principal) -> (opt User__1) query;
   http_request: (Request) -> (Response) query;
   notifyInstall: (PackageName__1, PackageVersion__1) -> () oneway;
   notifyInstalls: (vec record {
                          PackageName__1;
                          PackageVersion__1;
                        }) -> () oneway;
   removeMaintainer: (PackageName__1, principal) -> (Result_3);
   removeOwner: (PackageName__1, principal) -> (Result_3);
   restore: (nat) -> ();
   search: (Text, opt nat, opt nat) -> (vec PackageSummary, PageCount) query;
   setStorageControllers: () -> ();
   setUserProp: (text, text) -> (Result_3);
   startFileUpload: (PublishingId, Text, nat, blob) -> (Result_2);
   startPublish: (PackageConfigV3_Publishing) -> (Result_1);
   transformRequest: (HttpTransformArg) -> (HttpResponse) query;
   uploadBenchmarks: (PublishingId, Benchmarks) -> (Result);
   uploadDocsCoverage: (PublishingId, float64) -> (Result);
   uploadFileChunk: (PublishingId, FileId, nat, blob) -> (Result);
   uploadNotes: (PublishingId, text) -> (Result);
   uploadTestStats: (PublishingId, TestStats) -> (Result);
 };
type HttpTransformArg = 
 record {
   context: blob;
   response: HttpResponse;
 };
type HttpResponse = 
 record {
   body: blob;
   headers: vec HttpHeader;
   status: nat;
 };
type HttpHeader = 
 record {
   name: text;
   value: text;
 };
type Header = 
 record {
   text;
   text;
 };
type FileId = text;
type Err = text;
type DownloadsSnapshot__1 = 
 record {
   downloads: nat;
   endTime: Time;
   startTime: Time;
 };
type DownloadsSnapshot = 
 record {
   downloads: nat;
   endTime: Time;
   startTime: Time;
 };
type DepsStatus = 
 variant {
   allLatest;
   tooOld;
   updatesAvailable;
 };
type DependencyV2 = 
 record {
   name: PackageName;
   repo: text;
   version: text;
 };
type DepChange = 
 record {
   name: text;
   newVersion: text;
   oldVersion: text;
 };
type Benchmarks__1 = vec Benchmark;
type Benchmarks = vec Benchmark;
type BenchmarkMetric = text;
type Benchmark = 
 record {
   cols: vec text;
   compiler: text;
   compilerVersion: text;
   description: text;
   file: text;
   forceGC: bool;
   gc: text;
   metrics: vec record {
                  BenchmarkMetric;
                  vec vec int;
                };
   name: text;
   replica: text;
   replicaVersion: text;
   rows: vec text;
 };
service : () -> Main
